/**
 * Copyright 2015 Christian Dreher (dreher@charlydelta.org)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "nddlgen/core/NddlGenerator.h"

namespace nddlgen { namespace core
{

	NddlGenerator::NddlGenerator(nddlgen::models::Arm* armModel, nddlgen::utilities::ControllerMeta* controllerMeta)
	{
		this->_controllerMeta = controllerMeta;
		this->_armModel = armModel;
	}

	NddlGenerator::~NddlGenerator()
	{
		// TODO Auto-generated destructor stub
	}


	bool NddlGenerator::generateModels(std::string fileName)
	{
		std::ofstream ofStream(fileName);

		std::string nddlgenVersion = nddlgen::utilities::Meta::NDDLGEN_VERSION;
		std::string nddlgenProjectHomepage = nddlgen::utilities::Meta::NDDLGEN_PROJECT_HOMEPAGE;
		std::string nddlgenSupportEmail = nddlgen::utilities::Meta::NDDLGEN_SUPPORT_EMAIL;

		std::string authorChrDreherEmail = nddlgen::utilities::Meta::AUTHOR_CHR_DREHER_EMAIL;

		std::string adapter = this->_controllerMeta->adapter;
		std::string outputFile = this->_controllerMeta->outputFileModels;
		std::string inputFile = this->_controllerMeta->inputFile;

		std::string now = this->getPrettifiedDate();

		if (adapter == "")
		{
			adapter = "a custom adapter";
		}

		// Disclaimer / Meta
		wrln(0, "// Generated by nddlgen <" + nddlgenProjectHomepage + ">", 1);
		wrln(0, "// Author: Christian Dreher <" + authorChrDreherEmail + ">", 1);
		wrln(0, "// Support: <" + nddlgenSupportEmail + ">", 2);

		wrln(0, "// This NDDL model file (" + outputFile + ") was generated from \"" + inputFile + "\" ", 1);
		wrln(0, "// by nddlgen-core v" + nddlgenVersion + " using " + adapter + "", 1);
		wrln(0, "// Creation date: " + now, 2);
		// End declaimer / meta

		this->_armModel->generateModel(ofStream);

		ofStream.close();

		return true;
	}

	bool NddlGenerator::generateInitialState(std::string fileName)
	{
		//this->_initialState = this->_armModel->generateInitialStateAsString();

		return true;
	}

	std::string NddlGenerator::getPrettifiedDate()
	{
		std::string date = boost::posix_time::to_iso_extended_string(boost::posix_time::second_clock::local_time());

		boost::replace_all(date, "T", " ");

		return date;
	}

}}
