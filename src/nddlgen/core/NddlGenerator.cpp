/**
 * Copyright 2015 Christian Dreher (dreher@charlydelta.org)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <nddlgen/core/NddlGenerator.h>

namespace nddlgen { namespace core
{

	NddlGenerator::NddlGenerator()
	{

	}

	NddlGenerator::~NddlGenerator()
	{

	}


	void NddlGenerator::generateModels(nddlgen::models::DomainDescription* domainDescription, nddlgen::utilities::ControllerConfig* controllerConfig)
	{
		// Open output file stream
		std::ofstream ofStream(controllerConfig->getOutputModelFile());

		// Initialize needed variables (short-hands)
		std::string nddlgenVersion = nddlgen::utilities::Meta::NDDLGEN_VERSION;
		std::string nddlgenProjectHomepage = nddlgen::utilities::Meta::NDDLGEN_PROJECT_HOMEPAGE;
		std::string nddlgenSupportEmail = nddlgen::utilities::Meta::NDDLGEN_SUPPORT_EMAIL;
		std::string authorChrDreherEmail = nddlgen::utilities::Meta::AUTHOR_CHR_DREHER_EMAIL;
		std::string adapter = controllerConfig->getAdapter();
		std::string outputFile = controllerConfig->getOutputModelFileName();
		std::string sdfInputFile = controllerConfig->getSdfInputFileName();
		std::string sdfInputFilePath = controllerConfig->getIsdInputFileName();
		std::string now = NddlGenerator::getPrettifiedDate();

		// Disclaimer / Meta
		wrln(0, "// Generated by nddlgen <" + nddlgenProjectHomepage + ">", 1);
		wrln(0, "// Author: Christian Dreher <" + authorChrDreherEmail + ">", 1);
		wrln(0, "// Support: <" + nddlgenSupportEmail + ">", 2);

		wrln(0, "// This NDDL model file (" + outputFile + ") was generated from ", 1);
		wrln(0, "// \"" + sdfInputFile + "\" originally located in \"" + sdfInputFilePath + "\" by", 1);
		wrln(0, "// nddlgen-core v" + nddlgenVersion + " using " + adapter + "", 1);
		wrln(0, "// Creation date: " + now, 2);

		// Call generateModel() of sub-objects
		domainDescription->getArm()->generateModel(ofStream);

		// Model file generated, close stream
		ofStream.close();
	}

	void NddlGenerator::generateInitialState(nddlgen::models::DomainDescription* domainDescription, nddlgen::utilities::ControllerConfig* controllerConfig)
	{
		// Open output file stream
		std::ofstream ofStream(controllerConfig->getOutputInitialStateFile());

		// todo: generate output file

		ofStream.close();
	}

	std::string NddlGenerator::getPrettifiedDate()
	{
		// Get POSIX time
		std::string date = boost::posix_time::to_iso_extended_string(boost::posix_time::second_clock::local_time());

		// Replace T with space: "yyyymmddThh:MM:ss" => "yyyymmdd hh:MM:ss"
		boost::replace_all(date, "T", " ");

		// Return prettified date
		return date;
	}

}}
